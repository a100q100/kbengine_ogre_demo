<root>
	<gameUpdateHertz> 10 </gameUpdateHertz>
	
	<!-- 非0则不优化， 不带包长信息的包强制都携带长度信息， 某些情况下方便某些前端对接协议
	什么样的包不带长度信息? 所有能够预先计算出包大小的且永远不变的包不带长度信息， 
	如果有可变字符串参数则一定需要带长度信息 -->
	<packetAlwaysContainLength>0</packetAlwaysContainLength>
	
	<!-- 是否需要将任何接收和发送的包以文本输出到log中提供调试
		debug_type:
			0: 不输出
			1: 16进制输出
			2: 字符流输出
			3: 10进制输出
		use_logfile:
			是否独立一个log文件来记录包内容，文件名通常为
			appname_packetlogs.log
		disable_msgs:
			关闭某些包的输出
	-->
	<trace_packet>
		<debug_type>0</debug_type>
		<use_logfile>false</use_logfile>
		<disables>
			<item>Encrypted::packet</item>
			<item>Baseapp::onUpdateDataFromClient</item>
			<item>Client::onUpdateVolatileData</item>
			<item>Client::onUpdateData</item>
			<item>Client::onUpdateBasePos</item>
			<item>Client::onUpdateData_xz</item>
			<item>Client::onUpdateData_xyz</item>
			<item>Client::onUpdateData_y</item>
			<item>Client::onUpdateData_r</item>
			<item>Client::onUpdateData_p</item>
			<item>Client::onUpdateData_ypr</item>
			<item>Client::onUpdateData_yp</item>
			<item>Client::onUpdateData_yr</item>
			<item>Client::onUpdateData_pr</item>
			<item>Client::onUpdateData_xz_y</item>
			<item>Client::onUpdateData_xz_p</item>
			<item>Client::onUpdateData_xz_r</item>
			<item>Client::onUpdateData_xz_yr</item>
			<item>Client::onUpdateData_xz_yp</item>
			<item>Client::onUpdateData_xz_pr</item>
			<item>Client::onUpdateData_xz_ypr</item>
			<item>Client::onUpdateData_xyz_y</item>
			<item>Client::onUpdateData_xyz_p</item>
			<item>Client::onUpdateData_xyz_r</item>
			<item>Client::onUpdateData_xyz_yr</item>
			<item>Client::onUpdateData_xyz_yp</item>
			<item>Client::onUpdateData_xyz_pr</item>
			<item>Client::onUpdateData_xyz_ypr</item>
		</disables>
	</trace_packet>
	
	<!-- 是否输出entity的创建， 脚本获取属性， 初始化属性等调试信息 -->
	<debugEntity>0</debugEntity>

	<publish>
		<!-- 发布状态, 可在脚本中获取该值。 KBEngine.publish()
			(apps released state, This value can be obtained in the script. KBEngine.publish())
			Type: Integer8
			0 : debug
			1 : release
			其他自定义(Other custom)
		-->
		<state>0</state>

		<!-- 脚本层发布的版本号
			(Script layer released version number)
		 -->
		<script_version> 0.1.0 </script_version>
	</publish>
	
	<!-- 发送与接收窗口溢出值，0无限制
		(the value of the send/receive window overflow, 0 is unlimited)
	-->
	<windowOverflow>
		<send>
			<!-- 一个tick内发送的字节数溢出限制 
				(A tick, the value of the sent window overflow, 0 is unlimited)
			-->
			<tickSentBytes>
				<internal>	0			</internal>
				<external>	0			</external>
			</tickSentBytes>
			<messages>
				<critical>	1024		</critical>
				<internal>	65535		</internal>
				<external>	512		</external>
			</messages>
			<bytes>
				<internal>	0			</internal>
				<external>	1048576	</external>
			</bytes>
		</send>
		
		<receive>
			<messages>
				<critical>	24			</critical>
				<internal>	65535		</internal>
				<external>	32			</external>
			</messages>
			<bytes>
				<internal>	0			</internal>
				<external>	2048		</external>
			</bytes>
		</receive>
	</windowOverflow>
	
	<ip> localhost </ip>
	<port> 20013 </port>

	<!-- 如果被占用则向后尝试51001.. -->
	<telnet_service>
		<port> 51000 </port>
		<password> kbe </password>
		<!-- 命令默认层 -->
		<default_layer> python </default_layer>
	</telnet_service>
		
	<entryScriptFile> kbemain </entryScriptFile>
	
	<useLastAccountName>false</useLastAccountName>
	<accountName>kbengine</accountName>
	
	<!-- 加密登录信息
		可选加密:
			0: 无加密
			1: blowfish
			2: rsa (res\key\kbengine_private.key)
	 -->
	<encrypt_login> 2 </encrypt_login>
	
	<!-- 优化EntityID，aoi范围内小于255个EntityID, 传输到client时使用1字节别名ID -->
	<aliasEntityID> true </aliasEntityID>

	<!-- 优化entity属性和方法广播时占用的带宽，entity客户端属性或者客户端不超过255个时， 
		方法uid和属性uid传输到client时使用1字节别名ID -->
	<entitydefAliasID>true</entitydefAliasID>
	
	<!-- 在Entity初始化时是否触发属性的set_*事件 -->
	<isOnInitCallPropertysSetMethods> true </isOnInitCallPropertysSetMethods>
</root>
